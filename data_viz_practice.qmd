---
title: "data_viz_practice"
format: html
---
```{r}
library(tidyverse)
library(here)
library(janitor)

install.packages("patchwork")
install.packages("ggrepel")
install.packages("gghighlight")
install.packages("paletteer")
install.packages("ggExtra")
install.packages("ggbeeswarm")
```
```{r}
library(tidyverse)
library(here)
library(janitor)
library(patchwork)
library(ggrepel)
library(gghighlight)
library(ggExtra)
library(ggbeeswarm)

```


```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```
```{r}

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point()

# and we can layer on other plots (see below)
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  geom_line()

# another way to make the same graph is to put the "aes" in the geometry line (geom_point)

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight))

# or like this

ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight))



```

```{r}

# for histograms only an X axis is necessaary
ggplot(data = lizards, aes(x = total_length)) + 
  geom_histogram()
```

```{r}
ggplot(data= lizards, aes(y = common_name, weight)) +
  geom_point()

ggplot(data= lizards, aes(y = common_name, weight)) +
  geom_point()

```

```{r}
ggplot(data = lizards, aes(x = weight)) +
  geom_histogram(color = "orange", 
                 fill = "purple", 
                 size = 2, 
                 linetype = "dotted")
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(color = "#DDC3D0",
             fill = "#3E92CC",
             shape = 22, 
             size = 3, 
             alpha = 0.2)

# alpha is for adjusting for how seethrough the points/fills of the graph are. 1 being the least seethrough 
```



```{r}
# updating an aesthetic based on a variable aes()

ggplot(data = lizards, aes(x = total_length, y = weight))+ 
  geom_point(aes(color = common_name, 
                 size = total_length), 
             alpha = 0.5)

# when we want to make changes BASED on a variable, we make the change WITHIN aes(), but if we want it to apply to all lines/points/ etc then we put the alpha OUTSIDE of the aes() ^^

ggplot(data = lizards, aes(x = total_length, y = weight))+ 
  geom_point(aes(color = common_name, 
                 size = total_length,
                   alpha = 1)) +
  scale_color_discrete(type = c("#AA4465", "#EDF0DA", "#EDF0DA", "#EDF0DA", "#EDF0DA","#EDF0DA","#EDF0DA" ))

 # scale_color  allows us to set a diff color per value being graphed                                                                                                 
```

```{r}


library(tidyverse)
library(here)
library(janitor)
library(patchwork)
library(ggrepel)
library(gghighlight)
library(ggExtra)
library(ggbeeswarm)

ggplot( data = lizards, aes( x = site, y = weight)) + 
  geom_jitter(aes(color = common_name)) +
  theme_minimal()

ggplot( data = lizards, aes( x = site, y = weight)) + 
  geom_jitter(aes(color = common_name)) +
  theme_light()  



# theme allows us to change the background. theme_minimal makes the background white with grey grid lines.we can customize and create our own themes to use in the future 

```
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  labs( x = "Total length (mm)", 
        y = "Weight (grams)", 
        title = "Lizard size")



```

# If what we are manipulating has to do with the data, it must happen in the aes() or in the geom function. otherwise, it happens outside of these , in theme()


# Faceting
```{r}
# there are two ways to facet -> wrap and grid

# in this example there are 7 species  
ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point() +
  facet_wrap(~common_name, ncol = 3, scales = "free" ) +
  labs (x = "Total length (mm)",
        y = "Weight (grams)")
# ncol decides how many columns the facets are arranged into 
# labs is changing the name of the axis 
# scales_free gives ecah facet its y and x scales


ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point() +
  facet_wrap(~common_name, ncol = 3 ) +
  labs (x = "Total length (mm)",
        y = "Weight (grams)")

# this ^ does not display an indiv. x and y scale per facet
```
```{r}

ggplot(data = lizards, aes(x = total_length, y = weight)) + 
  geom_point() +
  facet_wrap(sex ~ tail)

# in ^ facet_wrap(sex ~ tail) means sex is the x axis and tail is the y axis. the "~" is the syntax for telling operation how to facet

```


```{r}

lizards_counts <- lizards %>%
  count(common_name)

# if we wanted to rename the new "n" column that has the counts, we can %>% rename(n_counts = n)

ggplot(data = lizards_counts, aes(y = common_name, x = n)) +
  geom_col()

# if we want to re order the common names to follow the original order of lizard common_names, we do:

ggplot(data = lizards_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()

```


```{r}

# size" changes the size of the points to 2 

ggplot(data = lizards, aes( x = total_length, y = weight)) +
  geom_point(aes(color = common_name, shape = common_name), 
             size = 2) + 
  theme_minimal() +
  labs(x = "Total length (mm)", 
       y = "Weight (g)", 
       color = "Lizard Species") +
  facet_wrap(~ common_name, scales = "free")


```

```{r}

ggplot(data = lizards, aes( y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs( x = "Lizard counts",
        y = "Species (common name)")+
  facet_grid(sex ~ tail) + 
  theme()



# geom_bar and geom_col both create a bar graph but geom_bar will count the values and order them by frequency, in geom_col we would have to manually get the count first. 



```



```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous( breaks = seq(from = 0, to = 500, by = 250),
                       limits = c(0, 500)) +
  scale_y_continuous(breaks = seq (from = 0, to = 70, by = 10),
                       limits = c( 0, 70)) +
                       theme_light()
                         
```




```{r}
lizards_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>%
  count(date)

ggplot(data = lizards_counts, aes(x = date, y = n)) +
  geom_line() +
  scale_x_date(breaks = scales::breaks_width("3 years"),
  labels = scales::breaks_width("2 years"),
  labels = scales::label_date("'%y")) +
  labs(x = "Date",
       y = "Number of Lizards (n)")
  
```


```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = total_length)) +
  scale_color_steps2(low = "green", mid = "white", high = "red", midpoint = 150,
                     breaks = c(50, 75, 150, 180, 220, 280))
  #scale_color_steps(low = "red", high = "black") 
  #scale_color_gradientn(colors = c("orange","red","purple", "navy", "black"))
  #scale_color_gradient(low = "red", high = "navy")

```

```{r}

library(tidyverse)
library(here)
library(janitor)
library(patchwork)
library(ggrepel)
library(gghighlight)
library(ggExtra)
library(ggbeeswarm)


p <- ggplot(data = lizards, aes(x = total_length, y = weight )) +
  geom_point()

p + 
  theme(panel.grid = element_blank)
#to remove all grids it is element_blank

p <- theme(panel.grid.major.x  = element_blank(), 
           panel.grid.major.y  = element_line (color = "red"),
           plot.background = element_rect(fill = "pink"), 
           text = element_text(size = 12, family = "serif"), 
           axis.text.x = element_text(color = "blue"), 
           axis.text.y = element_text(color = "green"), 
           panel.background = element_rect(color = "purple", fill = "yellow"))  




```

```{r}

# creates horizontal lines or vertical lines if vline

# Or, have the value be determined based on a variable: 
p +
  geom_hline(yintercept = mean(lizards$weight), linetype = "dashed", color = "red") +
  annotate("text", x = 350, y = mean(lizards$weight) + 2, label = "Mean weight", color = "red")
```


```{r}
mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) +
  geom_rect(aes(xmin = 1941, 
                xmax = 1983, 
                ymin = 6350, 
                ymax = 6440), 
            fill = "gray90") +
  geom_line() +
  labs(x = "\nYear",
       y = "Lake surface level\n(feet above sea level)\n",
       title = "Mono Lake levels (1850 - 2017)\n",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_x_continuous(limits = c(1850, 2020), 
                     expand = c(0,0),
                     breaks = seq(1850, 2010, by = 20)) +
  scale_y_continuous(limits = c(6350, 6440), 
                     breaks = c(6370, 6400, 6430),
                     expand = c(0,0), 
                     labels = scales::label_comma()) +
  annotate("text", x = 1962, y = 6425, 
           label = "unrestricted diversions\n(1941 - 1983)",
           size = 3) +
  theme_light() +
  theme(plot.title.position = "plot",
        axis.text.y = element_text(face = "italic")) +
  geom_hline(yintercept = 6360, linetype = "dashed") +
  annotate("text", 
           x = 1910, 
           y = 6367, 
           label = "Decreased shrimp abundance expected\n(6,360 feet above sea level)",
           size = 3)
```


